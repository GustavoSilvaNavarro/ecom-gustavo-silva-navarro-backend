(()=>{"use strict";var t={n:s=>{var e=s&&s.__esModule?()=>s.default:()=>s;return t.d(e,{a:e}),e},d:(s,e)=>{for(var r in e)t.o(e,r)&&!t.o(s,r)&&Object.defineProperty(s,r,{enumerable:!0,get:e[r]})},o:(t,s)=>Object.prototype.hasOwnProperty.call(t,s)};const s=require("express");var e=t.n(s);const r=require("morgan");var o=t.n(r);const i=require("path");var n=t.n(i);const u=require("url"),a=require("fs");var c=t.n(a);let d=JSON.parse(c().readFileSync("./src/public/db/products.json","utf-8"));const l=(0,s.Router)();function p(t,s,e){{const t=new Error("You are not authorized to access this route");t.status=401,e(t)}}l.post("/",p,((t,s)=>{let e=0;const{nombre:r,description:o,codigo:i,url:n,precio:u,stock:a}=t.body;if(0===d.length)e=1;else{let t=[];d.forEach((s=>{t.push(s.id)})),e=Math.max(...t)+1}let l={id:e,timestamp:Date.now(),nombre:r,description:o,codigo:i,url:n,precio:Number(u),stock:Number(a)};d.push(l),c().writeFileSync("./src/public/db/products.json",JSON.stringify(d),"utf-8"),s.status(200).send("Created")})),l.put("/:id",p,((t,s,e)=>{const r=Number(t.params.id);if(d.length>0)if(isNaN(r)){const t=new Error("ID must be a number!");t.status=400,e(t)}else{const o=d.find((t=>t.id==r)),i=d.filter((t=>t.id!==r));if(o){const{nombre:e,description:n,codigo:u,url:a,precio:l,stock:p}=t.body;let f={id:r,timestamp:o.timestamp,nombre:e,description:n,codigo:u,url:a,precio:Number(l),stock:Number(p)};d=[...i,f],c().writeFileSync("./src/public/db/products.json",JSON.stringify(d),"utf-8"),s.status(200).send("Producto actualizado!")}else{const t=new Error("Product does not exist!");t.status=400,e(t)}}else{const t=new Error("Please register a product to update!");t.status=400,e(t)}})),l.delete("/:id",p,((t,s,e)=>{const r=Number(t.params.id);if(d.length>0)if(isNaN(r)){const t=new Error("ID must be a number!");t.status=400,e(t)}else if(d.find((t=>t.id===r))){const t=d.filter((t=>t.id!==r));d=t,c().writeFileSync("./src/public/db/products.json",JSON.stringify(d),"utf-8"),s.status(200).send("Producto eliminado!")}else{const t=new Error("Product does not exist!");t.status=400,e(t)}else{const t=new Error("Please register a product to update!");t.status=400,e(t)}}));const f=l,b=(0,s.Router)();b.get("/",((t,s,e)=>{if(d.length>0)s.status(200).json(d);else{const t=new Error("Product list empty!");t.status=400,e(t)}})),b.get("/:id",((t,s,e)=>{const r=Number(t.params.id);if(d.length>0)if(isNaN(r)){const t=new Error("ID must be a number!");t.status=400,e(t)}else{const t=d.find((t=>t.id===r));if(t)s.status(200).json(t);else{const t=new Error("Product does not exist!");t.status=400,e(t)}}else{const t=new Error("Please register a product!");t.status=400,e(t)}})),b.use("/",f);const m=b;let g=JSON.parse(c().readFileSync("./src/public/db/carts.json","utf-8")),N=JSON.parse(c().readFileSync("./src/public/db/products.json","utf-8"));const w=(0,s.Router)();w.post("/",((t,s)=>{let e=0;if(g.length>0){let t=[];g.forEach((s=>{t.push(s.id)})),e=Math.max(...t)+1}else e=1;let r={id:e,timestamp:Date.now(),products:[]};g.push(r),c().writeFileSync("./src/public/db/carts.json",JSON.stringify(g),"utf-8"),s.status(200).json({id:e})})),w.delete("/:id",((t,s,e)=>{const r=Number(t.params.id);if(g.length>0)if(isNaN(r)){const t=new Error("ID must be a number!");t.status=400,e(t)}else if(g.find((t=>t.id===r))){const t=g.filter((t=>t.id!==r));g=t,c().writeFileSync("./src/public/db/carts.json",JSON.stringify(g),"utf-8"),s.status(200).send("Carrito eliminado!")}else{const t=new Error("Cart does not exist!");t.status=400,e(t)}else{const t=new Error("Must to register a cart to be able to delete it!");t.status=400,e(t)}})),w.get("/:id/products",((t,s,e)=>{const r=Number(t.params.id);if(g.length>0)if(isNaN(r)){const t=new Error("ID must be a number!");t.status=400,e(t)}else{const t=g.find((t=>t.id==r));if(t)s.status(200).json(t.products);else{const t=new Error("Cart does not exist!");t.status=400,e(t)}}else{const t=new Error("Must to register a cart to be able to see products!");t.status=400,e(t)}})),w.post("/:id/products/:idProduct",((t,s,e)=>{const r=Number(t.params.id),o=Number(t.params.idProduct);if(g.length>0)if(N.length>0)if(isNaN(r)||isNaN(o)){const t=new Error("Both IDs must be a number!");t.status=400,e(t)}else{const t=N.find((t=>t.id==o)),i=g.find((t=>t.id==r));if(i)if(t){i.products.push(t);const e=g.filter((t=>t.id!==r));g=[...e,i],c().writeFileSync("./src/public/db/carts.json",JSON.stringify(g),"utf-8"),s.status(200).send("Producto anadido")}else{const t=new Error("Product does not exist!");t.status=400,e(t)}else{const t=new Error("Cart does not exist!");t.status=400,e(t)}}else{const t=new Error("Register products to be able to add them to the cart!");t.status=400,e(t)}else{const t=new Error("Register a cart to be able to add products to it!");t.status=400,e(t)}})),w.delete("/:id/products/:idProduct",((t,s,e)=>{const r=Number(t.params.id),o=Number(t.params.idProduct);if(g.length>0)if(N.length>0)if(isNaN(r)||isNaN(o)){const t=new Error("Both IDs must be a number!");t.status=400,e(t)}else{const t=g.filter((t=>t.id!==r)),i=g.find((t=>t.id==r));if(i)if(i.products.find((t=>t.id==o))){const e=i.products.filter((t=>t.id!==o));i.products=e,g=[...t,i],c().writeFileSync("./src/public/db/carts.json",JSON.stringify(g),"utf-8"),s.status(200).send("Producto Eliminado")}else{const t=new Error("Product does not exist!");t.status=400,e(t)}else{const t=new Error("Cart does not exist!");t.status=400,e(t)}}else{const t=new Error("Register products to be able to delete them from the cart!");t.status=400,e(t)}else{const t=new Error("Register a cart to be able to delete products from it!");t.status=400,e(t)}}));const h=w,E=e()(),y=n().dirname((0,u.fileURLToPath)("file:///C:/Users/gsnav/OneDrive/Escritorio/code/coderHouse/backend/ecom-gustavo-silva-navarro-backend/src/app.ts"));E.set("port",process.env.PORT||8080),E.use(e().static(n().join(y,"public"))),E.use(o()("dev")),E.use(e().urlencoded({extended:!1})),E.use(e().json()),E.use("/api/products",m),E.use("/api/carts",h),E.use(((t,s,e)=>{const r=new Error("Not found!");r.status=404,e(r)})),E.use(((t,s,e,r)=>{e.status(t.status||500).json({error:{status:t.status||500,message:t.message}})})),E.listen(E.get("port"),(()=>{console.log("Server on Port:",E.get("port"))}))})();